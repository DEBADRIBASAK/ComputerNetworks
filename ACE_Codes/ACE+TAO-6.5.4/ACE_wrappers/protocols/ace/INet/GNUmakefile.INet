# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.INet
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.INet
DEPENDENCY_FILE  = .depend.INet

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)ACE_INet.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)ACE_INet

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)ACE_INet.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

FILES = \
  AuthenticationBase.cpp \
  ClientRequestHandler.cpp \
  ConnectionCache.cpp \
  FTP_ClientRequestHandler.cpp \
  FTP_IOStream.cpp \
  FTP_Request.cpp \
  FTP_Response.cpp \
  FTP_URL.cpp \
  HTTP_BasicAuthentication.cpp \
  HTTP_ClientRequestHandler.cpp \
  HTTP_Header.cpp \
  HTTP_IOStream.cpp \
  HTTP_Request.cpp \
  HTTP_Response.cpp \
  HTTP_SessionBase.cpp \
  HTTP_Status.cpp \
  HTTP_URL.cpp \
  HeaderBase.cpp \
  INet_Log.cpp \
  IOS_util.cpp \
  Request.cpp \
  RequestHandler.cpp \
  Response.cpp \
  URLBase.cpp


LIBPATHS := . "../../../lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lACE

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU


GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/INet
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    ifeq ($(LIBCHECK_PREFIX),)
      # If the user hasn't specified a place to look for installed libraries, let's set
      # a reasonable default
      LIBCHECK_PREFIX = /usr
    endif
    LIBCHECK ?= $(filter-out $(foreach lib,ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) ../../../lib $(if $(ARCH),../../../lib/$(ARCH)) $(LIBCHECK_PREFIX)/lib $(LIBCHECK_PREFIX)/lib64 $(LIBCHECK_EXTRA_PATHS) $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(wince),1)
ifneq ($(old_stdstream),1)
ifneq ($(exclude_inet),1)
ifneq ($(ace_for_tao),1)
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif

ifneq ($(wince),1)
ifneq ($(old_stdstream),1)
ifneq ($(exclude_inet),1)
ifneq ($(ace_for_tao),1)
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../lib $(if $(ARCH),-L../../../lib/$(ARCH))
endif
CPPFLAGS     += -I../../.. -I../../../protocols
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DACE_INET_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo INet will not be built due to the following missing library: $(LIBCHECK) >&2

ifeq ($(wince),1)
avoids_enabled_macros += wince
endif
ifeq ($(old_stdstream),1)
avoids_enabled_macros += old_stdstream
endif
ifeq ($(exclude_inet),1)
avoids_enabled_macros += exclude_inet
endif
ifeq ($(ace_for_tao),1)
avoids_enabled_macros += ace_for_tao
endif
avoid_warning:
	@echo INet will not be built due to the following enabled make macros: $(avoids_enabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifneq ($(wince),1)
ifneq ($(old_stdstream),1)
ifneq ($(exclude_inet),1)
ifneq ($(ace_for_tao),1)
	@-:
endif
endif
endif
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LD_RPATH ?= -Wl,-rpath,
LDFLAGS += $(LD_RPATH)$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /ace/INet
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  )

LIB_INST_TAGS = header_files template_files inline_files$(if $(CUSTOM_INST_TAGS), $(CUSTOM_INST_TAGS))
LIB_INST_LOCATIONS = $(foreach tag,$(LIB_INST_TAGS),-b $(tag)=include$(INST_DIR))

INST_TAGS = lib_output$(if $(LIB_INST_TAGS), $(LIB_INST_TAGS))
INST_LOCATIONS = $(LIB_INST_LOCATIONS) -o lib_output=$(INSTALL_LIB)

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
ifneq ($(wince),1)
ifneq ($(old_stdstream),1)
ifneq ($(exclude_inet),1)
ifneq ($(ace_for_tao),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
	$(ACE_ROOT)/bin/ace_install_pkgconfig.pl ACE_INet.pc.in --destdir "$(DESTDIR)" --prefix $(INSTALL_PREFIX) --libdir $(INSTALL_LIB) --libs "$(LIBS)" --version $(GNUACE_PROJECT_VERSION)
endif
endif
endif
endif
endif
endif
endif

#BEGIN MPC-Generated Install Info
#header_files:
#INet_Export.h
#HTTP_Status.h
#Sock_IOStream.h
#URLBase.h
#FTP_Session.h
#StreamInterceptor.h
#RequestHandler.h
#HTTP_StreamPolicy.h
#HTTP_Header.h
#HTTP_Session.h
#INet_Log.h
#StreamHandler.h
#Response.h
#FTP_ClientRequestHandler.h
#HTTP_BasicAuthentication.h
#FTP_Response.h
#String_IOStream.h
#HeaderBase.h
#HTTP_SessionBase.h
#FTP_IOStream.h
#HTTP_URL.h
#HTTP_Request.h
#HTTP_StreamPolicyBase.h
#FTP_Request.h
#AuthenticationBase.h
#HTTP_ClientRequestHandler.h
#ClientRequestHandler.h
#HTTP_Response.h
#HTTP_IOStream.h
#Request.h
#ConnectionCache.h
#BidirStreamBuffer.h
#BufferedStreamBuffer.h
#IOS_util.h
#FTP_URL.h
#
#inline_files:
#HTTP_Status.inl
#URLBase.inl
#HTTP_Header.inl
#FTP_ClientRequestHandler.inl
#HTTP_BasicAuthentication.inl
#FTP_Response.inl
#HeaderBase.inl
#HTTP_SessionBase.inl
#FTP_IOStream.inl
#HTTP_URL.inl
#HTTP_Request.inl
#FTP_Request.inl
#AuthenticationBase.inl
#HTTP_ClientRequestHandler.inl
#ClientRequestHandler.inl
#HTTP_Response.inl
#HTTP_IOStream.inl
#ConnectionCache.inl
#FTP_URL.inl
#
#pkgconfig_files:
#ACE_INet.pc.in
#
#build_files:
#inet.mpc
#inet_ssl.mpc
#
#template_files:
#BidirStreamBuffer.cpp
#BufferedStreamBuffer.cpp
#HTTP_Session.cpp
#HTTP_StreamPolicy.cpp
#HTTP_StreamPolicyBase.cpp
#Sock_IOStream.cpp
#StreamHandler.cpp
#StreamInterceptor.cpp
#String_IOStream.cpp
#FTP_Session.cpp
#
#source_files:
#IOS_util.cpp
#INet_Log.cpp
#HeaderBase.cpp
#Request.cpp
#Response.cpp
#RequestHandler.cpp
#ConnectionCache.cpp
#ClientRequestHandler.cpp
#HTTP_Status.cpp
#HTTP_Header.cpp
#HTTP_Response.cpp
#HTTP_Request.cpp
#HTTP_IOStream.cpp
#HTTP_SessionBase.cpp
#HTTP_BasicAuthentication.cpp
#URLBase.cpp
#AuthenticationBase.cpp
#HTTP_URL.cpp
#HTTP_ClientRequestHandler.cpp
#FTP_Request.cpp
#FTP_Response.cpp
#FTP_IOStream.cpp
#FTP_URL.cpp
#FTP_ClientRequestHandler.cpp
#
#lib_output:
#../../../lib ACE_INet

#END MPC-Generated Install Info

