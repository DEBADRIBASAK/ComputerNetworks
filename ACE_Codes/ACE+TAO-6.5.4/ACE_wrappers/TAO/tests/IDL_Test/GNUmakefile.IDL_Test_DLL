# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.IDL_Test_DLL
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.IDL_Test_DLL
DEPENDENCY_FILE  = .depend.IDL_Test_DLL

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)IDL_Test_DLL.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)IDL_Test_DLL

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)IDL_Test_DLL.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  Bug_2350_RegressionC.cpp \
  Bug_2350_RegressionS.cpp \
  Bug_2577_RegressionC.cpp \
  Bug_2577_RegressionS.cpp \
  Bug_2582_RegressionC.cpp \
  Bug_2582_RegressionS.cpp \
  Bug_2583_RegressionC.cpp \
  Bug_2583_RegressionS.cpp \
  Bug_2616_RegressionC.cpp \
  Bug_2616_RegressionS.cpp \
  Bug_2619_RegressionC.cpp \
  Bug_2619_RegressionS.cpp \
  Bug_3243_RegressionC.cpp \
  Bug_3243_RegressionS.cpp \
  Bug_3312_RegressionC.cpp \
  Bug_3312_RegressionS.cpp \
  Bug_3819_RegressionC.cpp \
  Bug_3819_RegressionS.cpp \
  Bug_3821_RegressionC.cpp \
  Bug_3821_RegressionS.cpp \
  PEMNamingC.cpp \
  PEMNamingS.cpp \
  anonymousA.cpp \
  anonymousC.cpp \
  anonymousS.cpp \
  anyunionC.cpp \
  anyunionS.cpp \
  arrayC.cpp \
  arrayS.cpp \
  array_anon_nestedC.cpp \
  array_anon_nestedS.cpp \
  array_onlyA.cpp \
  array_onlyC.cpp \
  array_onlyS.cpp \
  attributeC.cpp \
  attributeS.cpp \
  constantsA.cpp \
  constantsC.cpp \
  constantsS.cpp \
  dif2A.cpp \
  dif2C.cpp \
  dif2S.cpp \
  enum_in_structC.cpp \
  enum_in_structS.cpp \
  fullC.cpp \
  fullS.cpp \
  fwdC.cpp \
  fwdS.cpp \
  generic_objectA.cpp \
  generic_objectC.cpp \
  generic_objectS.cpp \
  gperfC.cpp \
  gperfS.cpp \
  includedC.cpp \
  includedS.cpp \
  includingC.cpp \
  includingS.cpp \
  inheritA.cpp \
  inheritC.cpp \
  inheritS.cpp \
  interfaceC.cpp \
  interfaceS.cpp \
  keywordsA.cpp \
  keywordsC.cpp \
  keywordsS.cpp \
  loader_constC.cpp \
  moduleA.cpp \
  moduleC.cpp \
  moduleS.cpp \
  nested_scopeC.cpp \
  nested_scopeS.cpp \
  old_arrayC.cpp \
  old_arrayS.cpp \
  old_constantsC.cpp \
  old_constantsS.cpp \
  old_sequenceC.cpp \
  old_sequenceS.cpp \
  old_structC.cpp \
  old_structS.cpp \
  old_union2C.cpp \
  old_union2S.cpp \
  old_unionC.cpp \
  old_unionS.cpp \
  paramsC.cpp \
  paramsS.cpp \
  pragmaA.cpp \
  pragmaC.cpp \
  pragmaS.cpp \
  primtypesA.cpp \
  primtypesC.cpp \
  primtypesS.cpp \
  reopen_include1C.cpp \
  reopen_include1S.cpp \
  reopen_include2C.cpp \
  reopen_include2S.cpp \
  reopened_modulesC.cpp \
  reopened_modulesS.cpp \
  repo_id_modA.cpp \
  repo_id_modC.cpp \
  repo_id_modS.cpp \
  sequenceC.cpp \
  sequenceS.cpp \
  simple2C.cpp \
  simple2S.cpp \
  simpleC.cpp \
  simpleS.cpp \
  string_valueC.cpp \
  string_valueS.cpp \
  structC.cpp \
  structS.cpp \
  typecodeA.cpp \
  typecodeC.cpp \
  typecodeS.cpp \
  typedefA.cpp \
  typedefC.cpp \
  typedefS.cpp \
  typeprefixC.cpp \
  typeprefixS.cpp \
  unionC.cpp \
  unionS.cpp \
  valuetypeC.cpp \
  valuetypeS.cpp


LIBPATHS := . "../../../lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lTAO_Messaging -lTAO_PI -lTAO_CodecFactory -lTAO_PortableServer -lTAO_Valuetype -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = ../../../bin/tao_idl
TAO_IDL_DEP = ../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/IDL_Test_DLL
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    ifeq ($(LIBCHECK_PREFIX),)
      # If the user hasn't specified a place to look for installed libraries, let's set
      # a reasonable default
      LIBCHECK_PREFIX = /usr
    endif
    LIBCHECK ?= $(filter-out $(foreach lib,TAO_Messaging TAO_PI TAO_CodecFactory TAO_PortableServer TAO_Valuetype TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) ../../../lib $(if $(ARCH),../../../lib/$(ARCH)) $(LIBCHECK_PREFIX)/lib $(LIBCHECK_PREFIX)/lib64 $(LIBCHECK_EXTRA_PATHS) $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),TAO_Messaging TAO_PI TAO_CodecFactory TAO_PortableServer TAO_Valuetype TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(corba_messaging),1)
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif

ifeq ($(corba_messaging),1)
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../lib $(if $(ARCH),-L../../../lib/$(ARCH))
endif
CPPFLAGS     += -I../../.. -I../..
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_IDL_TEST_STUB_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo IDL_Test_DLL will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(corba_messaging),1)
requires_disabled_macros += corba_messaging
endif
require_warning:
	@echo IDL_Test_DLL will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
export DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export SHLIB_PATH        := $(SHLIB_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export LIBPATH           := $(LIBPATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export PATH              := $(PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(corba_messaging),1)
	@-:
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LD_RPATH ?= -Wl,-rpath,
LDFLAGS += $(LD_RPATH)$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


