# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.RTSched
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.RTSched
DEPENDENCY_FILE  = .depend.RTSched

IDL_DEPENDENCY_FILE1 = .depend.RTSched_Idl1

IDL_DEPENDENCY_FILES += \
	.depend.RTSched_Idl1

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)TAO_RTSched.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)TAO_RTSched

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)TAO_RTSched.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

Sched = \
  RtecSchedulerC.cpp \
  RtecSchedulerS.cpp \
  Runtime_Scheduler.cpp \
  Sched/Config_Scheduler.cpp \
  Sched/DynSched.cpp \
  Sched/Reconfig_Sched_Utils.cpp \
  Sched/SchedEntry.cpp \
  Sched/Scheduler.cpp \
  Sched/Scheduler_Generic.cpp \
  Sched/Strategy_Scheduler.cpp \
  Scheduler_Factory.cpp \
  Scheduler_Utilities.cpp

FILES += \
         $(Sched)

IDL_DEPS_FLAGS1 = $(TAO_IDLFLAGS) -I../../orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_RTSched_Export -Wb,export_include=orbsvcs/Sched/sched_export.h
IDL_DEPS1 = RtecScheduler.idl


VPATH = .:Sched


LIBPATHS := . "../../../lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lTAO_CosNaming -lTAO_Svc_Utils -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = ../../../bin/tao_idl
TAO_IDL_DEP = ../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

ifneq (,$(RC))
RESOURCES += \
  RTSched.rc

RC_INCLUDE_FLAG ?= --include-dir=
RCFLAGS = \
        $(RC_INCLUDE_FLAG)../../.. \
        $(RC_INCLUDE_FLAG)../.. \
        $(RC_INCLUDE_FLAG)../../orbsvcs
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/RTSched
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    ifeq ($(LIBCHECK_PREFIX),)
      # If the user hasn't specified a place to look for installed libraries, let's set
      # a reasonable default
      LIBCHECK_PREFIX = /usr
    endif
    LIBCHECK ?= $(filter-out $(foreach lib,TAO_CosNaming TAO_Svc_Utils TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) ../../../lib $(if $(ARCH),../../../lib/$(ARCH)) $(LIBCHECK_PREFIX)/lib $(LIBCHECK_PREFIX)/lib64 $(LIBCHECK_EXTRA_PATHS) $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),TAO_CosNaming TAO_Svc_Utils TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif

ifeq (,$(TAO_ORBSVCS))
else
  ifeq (Naming, $(findstring Naming, $(TAO_ORBSVCS)))
  ifeq (Sched, $(findstring Sched, $(TAO_ORBSVCS)))
  else
    LIB_CHECKED   =
    SHLIB =
  endif
  else
    LIB_CHECKED   =
    SHLIB =
  endif
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../lib $(if $(ARCH),-L../../../lib/$(ARCH))
endif
CPPFLAGS     += -I../../.. -I../.. -I../../orbsvcs
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_RTSCHED_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo RTSched will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
export DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export SHLIB_PATH        := $(SHLIB_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export LIBPATH           := $(LIBPATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export PATH              := $(PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))

GENERATED_DIRTY += RtecSchedulerS.h RtecSchedulerC.h RtecSchedulerC.inl RtecSchedulerC.cpp RtecSchedulerS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "RtecScheduler.idl" -nt "RtecSchedulerS.h" 2> /dev/null || $(TEST_EXE) "RtecScheduler.idl" -nt "RtecSchedulerC.h" 2> /dev/null || $(TEST_EXE) "RtecScheduler.idl" -nt "RtecSchedulerC.inl" 2> /dev/null || $(TEST_EXE) "RtecScheduler.idl" -nt "RtecSchedulerC.cpp" 2> /dev/null || $(TEST_EXE) "RtecScheduler.idl" -nt "RtecSchedulerS.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtecSchedulerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtecSchedulerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtecSchedulerC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtecSchedulerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtecSchedulerS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtecSchedulerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtecSchedulerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtecSchedulerC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtecSchedulerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtecSchedulerS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtecSchedulerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtecSchedulerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtecSchedulerC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtecSchedulerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtecSchedulerS.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
RtecSchedulerS.h RtecSchedulerC.h RtecSchedulerC.inl RtecSchedulerC.cpp RtecSchedulerS.cpp: RtecScheduler.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../../orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_RTSched_Export -Wb,export_include=orbsvcs/Sched/sched_export.h RtecScheduler.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
RtecSchedulerS.h RtecSchedulerC.h RtecSchedulerC.inl RtecSchedulerC.cpp RtecSchedulerS.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif

ADDITIONAL_IDL_TARGETS += RtecScheduler$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

# This assignment forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = RtecSchedulerC.cpp RtecSchedulerS.cpp Scheduler_Factory.cpp Runtime_Scheduler.cpp Scheduler_Utilities.cpp Sched/Config_Scheduler.cpp Sched/DynSched.cpp Sched/Reconfig_Sched_Utils.cpp Sched/SchedEntry.cpp Sched/Scheduler.cpp Sched/Scheduler_Generic.cpp Sched/Strategy_Scheduler.cpp  
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtecSchedulerC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtecSchedulerS.cpp=)

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif

incremental_depend_idl::
	@$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old
	@cp $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE1) \
	$(IDL_DEPS_FLAGS1) -t gnuidl -DMAKEDEPEND $(IDL_DEPS1)
	@if cmp -s $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS1)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS1)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old ;

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LD_RPATH ?= -Wl,-rpath,
LDFLAGS += $(LD_RPATH)$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /$(notdir $(PWD))
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  idl_files )

LIB_INST_TAGS = header_files template_files inline_files$(if $(CUSTOM_INST_TAGS), $(CUSTOM_INST_TAGS))
LIB_INST_LOCATIONS = $(foreach tag,$(LIB_INST_TAGS),-b $(tag)=include$(INST_DIR))

INST_TAGS = lib_output$(if $(LIB_INST_TAGS), $(LIB_INST_TAGS))
INST_LOCATIONS = $(LIB_INST_LOCATIONS) -o lib_output=$(INSTALL_LIB)

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
	$(ACE_ROOT)/bin/ace_install_pkgconfig.pl TAO_CosConcurrency.pc.in TAO_CosConcurrency_Serv.pc.in TAO_CosConcurrency_Skel.pc.in TAO_CosEvent.pc.in TAO_CosEvent_Serv.pc.in TAO_CosEvent_Skel.pc.in TAO_CosLifeCycle.pc.in TAO_CosLifeCycle_Skel.pc.in TAO_CosLoadBalancing.pc.in TAO_CosNaming.pc.in TAO_CosNaming_Serv.pc.in TAO_CosNaming_Skel.pc.in TAO_CosNotification.pc.in TAO_CosNotification_Serv.pc.in TAO_CosNotification_Skel.pc.in TAO_CosProperty.pc.in TAO_CosProperty_Serv.pc.in TAO_CosProperty_Skel.pc.in TAO_CosTime.pc.in TAO_CosTime_Serv.pc.in TAO_CosTime_Skel.pc.in TAO_CosTrading.pc.in TAO_CosTrading_Serv.pc.in TAO_CosTrading_Skel.pc.in TAO_DsEventLogAdmin.pc.in TAO_DsEventLogAdmin_Serv.pc.in TAO_DsEventLogAdmin_Skel.pc.in TAO_DsLogAdmin.pc.in TAO_DsLogAdmin_Serv.pc.in TAO_DsLogAdmin_Skel.pc.in TAO_DsNotifyLogAdmin.pc.in TAO_DsNotifyLogAdmin_Serv.pc.in TAO_DsNotifyLogAdmin_Skel.pc.in TAO_FTORB_Utils.pc.in TAO_FT_ClientORB.pc.in TAO_FT_ServerORB.pc.in TAO_FaultTolerance.pc.in TAO_PortableGroup.pc.in TAO_RTEvent.pc.in TAO_RTEventLogAdmin.pc.in TAO_RTEventLogAdmin_Serv.pc.in TAO_RTEventLogAdmin_Skel.pc.in TAO_RTEvent_Serv.pc.in TAO_RTEvent_Skel.pc.in TAO_Svc_Utils.pc.in --destdir "$(DESTDIR)" --prefix $(INSTALL_PREFIX) --libdir $(INSTALL_LIB) --libs "$(LIBS)" --version $(GNUACE_PROJECT_VERSION)
endif
endif
endif

#BEGIN MPC-Generated Install Info
#idl_files:
#RtecScheduler.idl
#
#header_files:
#RtecSchedulerS.h
#RtecSchedulerC.h
#Scheduler_Utilities.h
#Runtime_Scheduler.h
#Scheduler_Factory.h
#
#header_files:
#Sched/Config_Scheduler.h
#Sched/DynSched.h
#Sched/Reconfig_Sched_Utils.h
#Sched/Reconfig_Sched_Utils_T.h
#Sched/Reconfig_Scheduler.h
#Sched/Reconfig_Scheduler_T.h
#Sched/SchedEntry.h
#Sched/Scheduler.h
#Sched/Scheduler_Generic.h
#Sched/Strategy_Scheduler.h
#Sched/sched_export.h
#
#inline_files:
#RtecSchedulerC.inl
#Scheduler_Utilities.inl
#Sched/SchedEntry.inl
#Sched/DynSched.inl
#Scheduler_Factory.inl
#
#resource_files:
#RTSched.rc
#
#pkgconfig_files:
#TAO_CosConcurrency.pc.in
#TAO_CosConcurrency_Serv.pc.in
#TAO_CosConcurrency_Skel.pc.in
#TAO_CosEvent.pc.in
#TAO_CosEvent_Serv.pc.in
#TAO_CosEvent_Skel.pc.in
#TAO_CosLifeCycle.pc.in
#TAO_CosLifeCycle_Skel.pc.in
#TAO_CosLoadBalancing.pc.in
#TAO_CosNaming.pc.in
#TAO_CosNaming_Serv.pc.in
#TAO_CosNaming_Skel.pc.in
#TAO_CosNotification.pc.in
#TAO_CosNotification_Serv.pc.in
#TAO_CosNotification_Skel.pc.in
#TAO_CosProperty.pc.in
#TAO_CosProperty_Serv.pc.in
#TAO_CosProperty_Skel.pc.in
#TAO_CosTime.pc.in
#TAO_CosTime_Serv.pc.in
#TAO_CosTime_Skel.pc.in
#TAO_CosTrading.pc.in
#TAO_CosTrading_Serv.pc.in
#TAO_CosTrading_Skel.pc.in
#TAO_DsEventLogAdmin.pc.in
#TAO_DsEventLogAdmin_Serv.pc.in
#TAO_DsEventLogAdmin_Skel.pc.in
#TAO_DsLogAdmin.pc.in
#TAO_DsLogAdmin_Serv.pc.in
#TAO_DsLogAdmin_Skel.pc.in
#TAO_DsNotifyLogAdmin.pc.in
#TAO_DsNotifyLogAdmin_Serv.pc.in
#TAO_DsNotifyLogAdmin_Skel.pc.in
#TAO_FTORB_Utils.pc.in
#TAO_FT_ClientORB.pc.in
#TAO_FT_ServerORB.pc.in
#TAO_FaultTolerance.pc.in
#TAO_PortableGroup.pc.in
#TAO_RTEvent.pc.in
#TAO_RTEventLogAdmin.pc.in
#TAO_RTEventLogAdmin_Serv.pc.in
#TAO_RTEventLogAdmin_Skel.pc.in
#TAO_RTEvent_Serv.pc.in
#TAO_RTEvent_Skel.pc.in
#TAO_Svc_Utils.pc.in
#
#build_files:
#AV.mpc
#CosConcurrency.mpc
#CosEvent.mpc
#CosLifeCycle.mpc
#CosLoadBalancing.mpc
#CosNaming.mpc
#CosNaming_Serv.mpc
#CosNaming_Skel.mpc
#CosNotification.mpc
#CosProperty.mpc
#CosTime.mpc
#CosTrading.mpc
#DsEventLogAdmin.mpc
#DsLogAdmin.mpc
#DsNotifyLogAdmin.mpc
#FTORB.mpc
#FT_Naming_Serv.mpc
#FaultTolerance.mpc
#FtNaming.mpc
#FtNamingReplication.mpc
#FtRtEvent.mpc
#HTIOP.mpc
#IFRService.mpc
#PortableGroup.mpc
#RTCORBAEvent.mpc
#RTEvent.mpc
#RTEventLogAdmin.mpc
#RTEvent_Serv.mpc
#RTEvent_Skel.mpc
#RTKokyuEvent.mpc
#RTSched.mpc
#RTSchedEvent.mpc
#RT_Notification.mpc
#SSLIOP.mpc
#Security.mpc
#Svc_Utils.mpc
#cosnaming_serv_persistence.mpb
#ec_typed_events.mpb
#ec_typed_events_idl.mpb
#ec_typed_events_serv.mpb
#ec_typed_events_skel.mpb
#ssliop_params_dup.mpb
#orbsvcs.mwc
#
#template_files:
#Sched/Reconfig_Sched_Utils_T.cpp
#Sched/Reconfig_Scheduler_T.cpp
#
#source_files:
#RtecSchedulerC.cpp
#RtecSchedulerS.cpp
#Scheduler_Factory.cpp
#Runtime_Scheduler.cpp
#Scheduler_Utilities.cpp
#Sched/Config_Scheduler.cpp
#Sched/DynSched.cpp
#Sched/Reconfig_Sched_Utils.cpp
#Sched/SchedEntry.cpp
#Sched/Scheduler.cpp
#Sched/Scheduler_Generic.cpp
#Sched/Strategy_Scheduler.cpp
#
#lib_output:
#../../../lib TAO_RTSched

#END MPC-Generated Install Info

