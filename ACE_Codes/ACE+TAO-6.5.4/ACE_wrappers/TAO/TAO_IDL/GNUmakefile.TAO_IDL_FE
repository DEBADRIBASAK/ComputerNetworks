# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.TAO_IDL_FE
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.TAO_IDL_FE
DEPENDENCY_FILE  = .depend.TAO_IDL_FE

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)TAO_IDL_FE.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)TAO_IDL_FE

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  ast/ast_annotation_appl.cpp \
  ast/ast_annotation_decl.cpp \
  ast/ast_annotation_member.cpp \
  ast/ast_argument.cpp \
  ast/ast_array.cpp \
  ast/ast_attribute.cpp \
  ast/ast_check.cpp \
  ast/ast_component.cpp \
  ast/ast_component_fwd.cpp \
  ast/ast_concrete_type.cpp \
  ast/ast_connector.cpp \
  ast/ast_constant.cpp \
  ast/ast_consumes.cpp \
  ast/ast_decl.cpp \
  ast/ast_emits.cpp \
  ast/ast_enum.cpp \
  ast/ast_enum_val.cpp \
  ast/ast_eventtype.cpp \
  ast/ast_eventtype_fwd.cpp \
  ast/ast_exception.cpp \
  ast/ast_expression.cpp \
  ast/ast_extended_port.cpp \
  ast/ast_factory.cpp \
  ast/ast_field.cpp \
  ast/ast_finder.cpp \
  ast/ast_fixed.cpp \
  ast/ast_generator.cpp \
  ast/ast_home.cpp \
  ast/ast_interface.cpp \
  ast/ast_interface_fwd.cpp \
  ast/ast_mirror_port.cpp \
  ast/ast_module.cpp \
  ast/ast_native.cpp \
  ast/ast_operation.cpp \
  ast/ast_param_holder.cpp \
  ast/ast_porttype.cpp \
  ast/ast_predefined_type.cpp \
  ast/ast_provides.cpp \
  ast/ast_publishes.cpp \
  ast/ast_recursive.cpp \
  ast/ast_root.cpp \
  ast/ast_sequence.cpp \
  ast/ast_string.cpp \
  ast/ast_structure.cpp \
  ast/ast_structure_fwd.cpp \
  ast/ast_template_module.cpp \
  ast/ast_template_module_inst.cpp \
  ast/ast_template_module_ref.cpp \
  ast/ast_type.cpp \
  ast/ast_typedef.cpp \
  ast/ast_union.cpp \
  ast/ast_union_branch.cpp \
  ast/ast_union_fwd.cpp \
  ast/ast_union_label.cpp \
  ast/ast_uses.cpp \
  ast/ast_valuebox.cpp \
  ast/ast_valuetype.cpp \
  ast/ast_valuetype_fwd.cpp \
  ast/ast_visitor.cpp \
  ast/ast_visitor_context.cpp \
  ast/ast_visitor_reifying.cpp \
  ast/ast_visitor_tmpl_module_inst.cpp \
  ast/ast_visitor_tmpl_module_ref.cpp \
  fe/fe_component_header.cpp \
  fe/fe_declarator.cpp \
  fe/fe_extern.cpp \
  fe/fe_global.cpp \
  fe/fe_home_header.cpp \
  fe/fe_init.cpp \
  fe/fe_interface_header.cpp \
  fe/fe_lookup.cpp \
  fe/fe_obv_header.cpp \
  fe/fe_private.cpp \
  fe/fe_utils.cpp \
  fe/idl.tab.cpp \
  fe/idl.yy.cpp \
  narrow/narrow.cpp \
  util/idl_version.cpp \
  util/utl_annotations.cpp \
  util/utl_decllist.cpp \
  util/utl_err.cpp \
  util/utl_exceptlist.cpp \
  util/utl_exprlist.cpp \
  util/utl_global.cpp \
  util/utl_identifier.cpp \
  util/utl_idlist.cpp \
  util/utl_indenter.cpp \
  util/utl_labellist.cpp \
  util/utl_list.cpp \
  util/utl_namelist.cpp \
  util/utl_scope.cpp \
  util/utl_stack.cpp \
  util/utl_string.cpp \
  util/utl_strlist.cpp

VPATH = .:fe:ast:narrow:util


LIBPATHS := . "../../lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lACE

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/TAO_IDL_FE
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    ifeq ($(LIBCHECK_PREFIX),)
      # If the user hasn't specified a place to look for installed libraries, let's set
      # a reasonable default
      LIBCHECK_PREFIX = /usr
    endif
    LIBCHECK ?= $(filter-out $(foreach lib,ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) ../../lib $(if $(ARCH),../../lib/$(ARCH)) $(LIBCHECK_PREFIX)/lib $(LIBCHECK_PREFIX)/lib64 $(LIBCHECK_EXTRA_PATHS) $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../lib $(if $(ARCH),-L../../lib/$(ARCH))
endif
CPPFLAGS     += -I../.. -I.. -Iinclude -Ife
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_IDL_FE_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo TAO_IDL_FE will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LD_RPATH ?= -Wl,-rpath,
LDFLAGS += $(LD_RPATH)$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /$(notdir $(PWD))
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  )

ifeq ($(shared_libs),1)
INST_TAGS = lib_output$(if $(LIB_INST_TAGS), $(LIB_INST_TAGS))
INST_LOCATIONS = $(LIB_INST_LOCATIONS) -o lib_output=$(INSTALL_LIB)
endif

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
endif
endif
endif

#BEGIN MPC-Generated Install Info
#source_files:
#fe/fe_component_header.cpp
#fe/fe_declarator.cpp
#fe/fe_extern.cpp
#fe/fe_global.cpp
#fe/fe_home_header.cpp
#fe/fe_init.cpp
#fe/fe_interface_header.cpp
#fe/fe_lookup.cpp
#fe/fe_obv_header.cpp
#fe/fe_private.cpp
#fe/fe_utils.cpp
#fe/idl.tab.cpp
#fe/idl.yy.cpp
#ast/ast_annotation_appl.cpp
#ast/ast_annotation_decl.cpp
#ast/ast_annotation_member.cpp
#ast/ast_argument.cpp
#ast/ast_array.cpp
#ast/ast_attribute.cpp
#ast/ast_check.cpp
#ast/ast_component.cpp
#ast/ast_component_fwd.cpp
#ast/ast_concrete_type.cpp
#ast/ast_connector.cpp
#ast/ast_constant.cpp
#ast/ast_consumes.cpp
#ast/ast_decl.cpp
#ast/ast_emits.cpp
#ast/ast_enum.cpp
#ast/ast_enum_val.cpp
#ast/ast_eventtype.cpp
#ast/ast_eventtype_fwd.cpp
#ast/ast_exception.cpp
#ast/ast_expression.cpp
#ast/ast_extended_port.cpp
#ast/ast_factory.cpp
#ast/ast_field.cpp
#ast/ast_finder.cpp
#ast/ast_fixed.cpp
#ast/ast_generator.cpp
#ast/ast_home.cpp
#ast/ast_interface.cpp
#ast/ast_interface_fwd.cpp
#ast/ast_mirror_port.cpp
#ast/ast_module.cpp
#ast/ast_native.cpp
#ast/ast_operation.cpp
#ast/ast_param_holder.cpp
#ast/ast_porttype.cpp
#ast/ast_predefined_type.cpp
#ast/ast_provides.cpp
#ast/ast_publishes.cpp
#ast/ast_recursive.cpp
#ast/ast_root.cpp
#ast/ast_sequence.cpp
#ast/ast_string.cpp
#ast/ast_structure.cpp
#ast/ast_structure_fwd.cpp
#ast/ast_template_module.cpp
#ast/ast_template_module_inst.cpp
#ast/ast_template_module_ref.cpp
#ast/ast_type.cpp
#ast/ast_typedef.cpp
#ast/ast_union.cpp
#ast/ast_union_branch.cpp
#ast/ast_union_fwd.cpp
#ast/ast_union_label.cpp
#ast/ast_uses.cpp
#ast/ast_valuebox.cpp
#ast/ast_valuetype.cpp
#ast/ast_valuetype_fwd.cpp
#ast/ast_visitor.cpp
#ast/ast_visitor_context.cpp
#ast/ast_visitor_reifying.cpp
#ast/ast_visitor_tmpl_module_inst.cpp
#ast/ast_visitor_tmpl_module_ref.cpp
#util/idl_version.cpp
#util/utl_annotations.cpp
#util/utl_decllist.cpp
#util/utl_err.cpp
#util/utl_exceptlist.cpp
#util/utl_exprlist.cpp
#util/utl_global.cpp
#util/utl_identifier.cpp
#util/utl_idlist.cpp
#util/utl_indenter.cpp
#util/utl_labellist.cpp
#util/utl_list.cpp
#util/utl_namelist.cpp
#util/utl_scope.cpp
#util/utl_stack.cpp
#util/utl_string.cpp
#util/utl_strlist.cpp
#narrow/narrow.cpp
#
#template_files:
#include/utl_scope_T.cpp
#
#build_files:
#tao_idl.mpc
#tao_idl_be.mpc
#tao_idl_fe.mpc
#TAO_IDL.mwc
#TAO_IDL_ACE.mwc
#
#header_files:
#include/TAO_IDL_FE_Export.h
#include/ast.h
#include/ast_annotation_appl.h
#include/ast_annotation_decl.h
#include/ast_annotation_member.h
#include/ast_argument.h
#include/ast_array.h
#include/ast_attribute.h
#include/ast_component.h
#include/ast_component_fwd.h
#include/ast_concrete_type.h
#include/ast_connector.h
#include/ast_constant.h
#include/ast_consumes.h
#include/ast_decl.h
#include/ast_emits.h
#include/ast_enum.h
#include/ast_enum_val.h
#include/ast_eventtype.h
#include/ast_eventtype_fwd.h
#include/ast_exception.h
#include/ast_expression.h
#include/ast_extended_port.h
#include/ast_extern.h
#include/ast_factory.h
#include/ast_field.h
#include/ast_finder.h
#include/ast_fixed.h
#include/ast_generator.h
#include/ast_home.h
#include/ast_interface.h
#include/ast_interface_fwd.h
#include/ast_mirror_port.h
#include/ast_module.h
#include/ast_native.h
#include/ast_operation.h
#include/ast_param_holder.h
#include/ast_porttype.h
#include/ast_predefined_type.h
#include/ast_provides.h
#include/ast_publishes.h
#include/ast_root.h
#include/ast_sequence.h
#include/ast_string.h
#include/ast_structure.h
#include/ast_structure_fwd.h
#include/ast_template_module.h
#include/ast_template_module_inst.h
#include/ast_template_module_ref.h
#include/ast_type.h
#include/ast_typedef.h
#include/ast_union.h
#include/ast_union_branch.h
#include/ast_union_fwd.h
#include/ast_union_label.h
#include/ast_uses.h
#include/ast_valuebox.h
#include/ast_valuetype.h
#include/ast_valuetype_fwd.h
#include/ast_visitor.h
#include/ast_visitor_context.h
#include/ast_visitor_reifying.h
#include/ast_visitor_tmpl_module_inst.h
#include/ast_visitor_tmpl_module_ref.h
#include/drv_extern.h
#include/fe_component_header.h
#include/fe_declarator.h
#include/fe_extern.h
#include/fe_home_header.h
#include/fe_interface_header.h
#include/fe_obv_header.h
#include/fe_private.h
#include/fe_utils.h
#include/global_extern.h
#include/idl_defines.h
#include/idl_global.h
#include/idl_narrow.h
#include/idl_version.h
#include/nr_extern.h
#include/utl_annotations.h
#include/utl_decllist.h
#include/utl_err.h
#include/utl_exceptlist.h
#include/utl_exprlist.h
#include/utl_identifier.h
#include/utl_idlist.h
#include/utl_indenter.h
#include/utl_labellist.h
#include/utl_list.h
#include/utl_namelist.h
#include/utl_scope.h
#include/utl_scoped_name.h
#include/utl_stack.h
#include/utl_string.h
#include/utl_strlist.h
#fe/idl.tab.hpp
#
#lib_output:
#../../lib TAO_IDL_FE

#END MPC-Generated Install Info

