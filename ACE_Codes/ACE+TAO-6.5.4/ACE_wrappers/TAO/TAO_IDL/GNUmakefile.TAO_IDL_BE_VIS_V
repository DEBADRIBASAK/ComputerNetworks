# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.TAO_IDL_BE_VIS_V
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.TAO_IDL_BE_VIS_V
DEPENDENCY_FILE  = .depend.TAO_IDL_BE_VIS_V

LIB_PREFIX      ?= lib

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \


LIBPATHS := . "../../lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/TAO_IDL_BE_VIS_V
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

LIBCHECK = 1
ifeq ($(build_tao_idl_be),1)
ifneq ($(LIBCHECK), 1)
  all: lib_warning
endif
else
  all: require_warning
endif

ifeq ($(build_tao_idl_be),1)
else
  all: require_warning
endif

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../lib $(if $(ARCH),-L../../lib/$(ARCH))
endif
CPPFLAGS     += -I../.. -I../TAO_IDL/fe -I../TAO_IDL/include -I.. -Iinclude -Ibe_include -Ife
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_IDL_BE_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo TAO_IDL_BE_VIS_V will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(build_tao_idl_be),1)
requires_disabled_macros += build_tao_idl_be
endif
require_warning:
	@echo TAO_IDL_BE_VIS_V will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
ifeq ($(build_tao_idl_be),1)
all: $(GENERATED_DIRTY)
endif
endif



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(build_tao_idl_be),1)
	@-:
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LD_RPATH ?= -Wl,-rpath,
LDFLAGS += $(LD_RPATH)$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /$(notdir $(PWD))
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  )

INST_TAGS = $(CUSTOM_INST_TAGS)
INST_LOCATIONS = $(foreach tag,$(INST_TAGS),-b $(tag)=include$(INST_DIR))

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
ifeq ($(build_tao_idl_be),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
endif
endif
endif
endif

#BEGIN MPC-Generated Install Info
#build_files:
#tao_idl.mpc
#tao_idl_be.mpc
#tao_idl_fe.mpc
#TAO_IDL.mwc
#TAO_IDL_ACE.mwc
#
#header_files:
#be_include/TAO_IDL_BE_Export.h
#be_include/be_argument.h
#be_include/be_array.h
#be_include/be_attribute.h
#be_include/be_codegen.h
#be_include/be_component.h
#be_include/be_component_fwd.h
#be_include/be_connector.h
#be_include/be_constant.h
#be_include/be_consumes.h
#be_include/be_decl.h
#be_include/be_emits.h
#be_include/be_enum.h
#be_include/be_enum_val.h
#be_include/be_eventtype.h
#be_include/be_eventtype_fwd.h
#be_include/be_exception.h
#be_include/be_expression.h
#be_include/be_extended_port.h
#be_include/be_extern.h
#be_include/be_factory.h
#be_include/be_field.h
#be_include/be_finder.h
#be_include/be_fixed.h
#be_include/be_generator.h
#be_include/be_global.h
#be_include/be_helper.h
#be_include/be_home.h
#be_include/be_identifier_helper.h
#be_include/be_interface.h
#be_include/be_interface_fwd.h
#be_include/be_mirror_port.h
#be_include/be_module.h
#be_include/be_native.h
#be_include/be_null_return_emitter.h
#be_include/be_operation.h
#be_include/be_param_holder.h
#be_include/be_porttype.h
#be_include/be_predefined_type.h
#be_include/be_provides.h
#be_include/be_publishes.h
#be_include/be_root.h
#be_include/be_scope.h
#be_include/be_sequence.h
#be_include/be_string.h
#be_include/be_structure.h
#be_include/be_structure_fwd.h
#be_include/be_template_module.h
#be_include/be_template_module_inst.h
#be_include/be_template_module_ref.h
#be_include/be_type.h
#be_include/be_typedef.h
#be_include/be_union.h
#be_include/be_union_branch.h
#be_include/be_union_fwd.h
#be_include/be_union_label.h
#be_include/be_uses.h
#be_include/be_util.h
#be_include/be_valuebox.h
#be_include/be_valuetype.h
#be_include/be_valuetype_fwd.h
#be_include/be_visitor.h
#be_include/be_visitor_amh_pre_proc.h
#be_include/be_visitor_ami_pre_proc.h
#be_include/be_visitor_any_extracted_type_decl.h
#be_include/be_visitor_arg_traits.h
#be_include/be_visitor_argument.h
#be_include/be_visitor_array.h
#be_include/be_visitor_attr_assign.h
#be_include/be_visitor_attr_init.h
#be_include/be_visitor_attr_return.h
#be_include/be_visitor_attr_setarg_type.h
#be_include/be_visitor_attribute.h
#be_include/be_visitor_ccm_pre_proc.h
#be_include/be_visitor_component.h
#be_include/be_visitor_component_fwd.h
#be_include/be_visitor_component_scope.h
#be_include/be_visitor_connector.h
#be_include/be_visitor_constant.h
#be_include/be_visitor_context.h
#be_include/be_visitor_dds_ts_idl.h
#be_include/be_visitor_decl.h
#be_include/be_visitor_enum.h
#be_include/be_visitor_exception.h
#be_include/be_visitor_field.h
#be_include/be_visitor_home.h
#be_include/be_visitor_interface.h
#be_include/be_visitor_interface_fwd.h
#be_include/be_visitor_member_type_decl.h
#be_include/be_visitor_module.h
#be_include/be_visitor_native.h
#be_include/be_visitor_null_return_value.h
#be_include/be_visitor_operation.h
#be_include/be_visitor_root.h
#be_include/be_visitor_scope.h
#be_include/be_visitor_sequence.h
#be_include/be_visitor_structure.h
#be_include/be_visitor_structure_fwd.h
#be_include/be_visitor_template_export.h
#be_include/be_visitor_traits.h
#be_include/be_visitor_typecode.h
#be_include/be_visitor_typedef.h
#be_include/be_visitor_union.h
#be_include/be_visitor_union_branch.h
#be_include/be_visitor_union_fwd.h
#be_include/be_visitor_valuebox.h
#be_include/be_visitor_valuetype.h
#be_include/be_visitor_valuetype_fwd.h
#be_include/be_visitor_xplicit_pre_proc.h
#

#END MPC-Generated Install Info

