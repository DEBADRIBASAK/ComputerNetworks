# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.PortableServer
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.PortableServer
DEPENDENCY_FILE  = .depend.PortableServer

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)TAO_PortableServer.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)TAO_PortableServer

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)TAO_PortableServer.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  Acceptor_Filter_Factory.cpp \
  Active_Object_Map.cpp \
  Active_Object_Map_Entry.cpp \
  Active_Policy_Strategies.cpp \
  AdapterActivatorA.cpp \
  AdapterActivatorC.cpp \
  Collocated_Arguments_Converter.cpp \
  Collocated_Object_Proxy_Broker.cpp \
  Creation_Time.cpp \
  Default_Acceptor_Filter.cpp \
  Default_Policy_Validator.cpp \
  Default_Servant_Dispatcher.cpp \
  Direct_Collocation_Upcall_Wrapper.cpp \
  ForwardRequestA.cpp \
  ForwardRequestC.cpp \
  IdAssignmentPolicy.cpp \
  IdAssignmentPolicyA.cpp \
  IdAssignmentPolicyC.cpp \
  IdAssignmentStrategy.cpp \
  IdAssignmentStrategyFactoryImpl.cpp \
  IdAssignmentStrategySystem.cpp \
  IdAssignmentStrategyUser.cpp \
  IdUniquenessPolicy.cpp \
  IdUniquenessPolicyA.cpp \
  IdUniquenessPolicyC.cpp \
  IdUniquenessStrategyFactoryImpl.cpp \
  IdUniquenessStrategyMultiple.cpp \
  IdUniquenessStrategyUnique.cpp \
  IdUniquenessStrategyUniqueFactoryImpl.cpp \
  ImR_Client_Adapter.cpp \
  ImplicitActivationPolicy.cpp \
  ImplicitActivationPolicyA.cpp \
  ImplicitActivationPolicyC.cpp \
  ImplicitActivationStrategy.cpp \
  ImplicitActivationStrategyExplicit.cpp \
  ImplicitActivationStrategyFactoryImpl.cpp \
  ImplicitActivationStrategyImplicit.cpp \
  Key_Adapters.cpp \
  LifespanPolicy.cpp \
  LifespanPolicyA.cpp \
  LifespanPolicyC.cpp \
  LifespanStrategy.cpp \
  LifespanStrategyFactoryImpl.cpp \
  LifespanStrategyPersistent.cpp \
  LifespanStrategyPersistentFactoryImpl.cpp \
  LifespanStrategyTransient.cpp \
  LifespanStrategyTransientFactoryImpl.cpp \
  Network_Priority_Hook.cpp \
  Non_Servant_Upcall.cpp \
  ORT_Adapter_Factory.cpp \
  Object_Adapter.cpp \
  Object_Adapter_Factory.cpp \
  Operation_Table.cpp \
  Operation_Table_Binary_Search.cpp \
  Operation_Table_Dynamic_Hash.cpp \
  Operation_Table_Linear_Search.cpp \
  Operation_Table_Perfect_Hash.cpp \
  POAC.cpp \
  POAManager.cpp \
  POAManagerC.cpp \
  POAManagerFactory.cpp \
  POAManagerFactoryC.cpp \
  POA_Cached_Policies.cpp \
  POA_Current.cpp \
  POA_Current_Factory.cpp \
  POA_Current_Impl.cpp \
  POA_Guard.cpp \
  POA_Policy_Set.cpp \
  PS_CurrentC.cpp \
  PS_ForwardA.cpp \
  PS_ForwardC.cpp \
  PolicyS.cpp \
  PortableServer.cpp \
  PortableServerC.cpp \
  PortableServer_Functions.cpp \
  PortableServer_WFunctions.cpp \
  PortableServer_includeC.cpp \
  Regular_POA.cpp \
  RequestProcessingPolicy.cpp \
  RequestProcessingPolicyA.cpp \
  RequestProcessingPolicyC.cpp \
  RequestProcessingStrategy.cpp \
  RequestProcessingStrategyAOMOnly.cpp \
  RequestProcessingStrategyAOMOnlyFactoryImpl.cpp \
  RequestProcessingStrategyDefaultServant.cpp \
  RequestProcessingStrategyDefaultServantFI.cpp \
  RequestProcessingStrategyFactoryImpl.cpp \
  RequestProcessingStrategyServantActivator.cpp \
  RequestProcessingStrategyServantActivatorFI.cpp \
  RequestProcessingStrategyServantLocator.cpp \
  RequestProcessingStrategyServantLocatorFI.cpp \
  RequestProcessingStrategyServantManager.cpp \
  Root_POA.cpp \
  SUpcall_commands.cpp \
  ServantActivatorA.cpp \
  ServantActivatorC.cpp \
  ServantLocatorA.cpp \
  ServantLocatorC.cpp \
  ServantManagerA.cpp \
  ServantManagerC.cpp \
  ServantRetentionPolicy.cpp \
  ServantRetentionPolicyA.cpp \
  ServantRetentionPolicyC.cpp \
  ServantRetentionStrategyFactoryImpl.cpp \
  ServantRetentionStrategyNonRetain.cpp \
  ServantRetentionStrategyNonRetainFactoryImpl.cpp \
  ServantRetentionStrategyRetain.cpp \
  ServantRetentionStrategyRetainFactoryImpl.cpp \
  Servant_Base.cpp \
  Servant_Dispatcher.cpp \
  Servant_Upcall.cpp \
  StrategyFactory.cpp \
  ThreadPolicy.cpp \
  ThreadPolicyA.cpp \
  ThreadPolicyC.cpp \
  ThreadStrategy.cpp \
  ThreadStrategyFactoryImpl.cpp \
  ThreadStrategyORBControl.cpp \
  ThreadStrategySingle.cpp \
  ThreadStrategySingleFactoryImpl.cpp \
  Upcall_Command.cpp \
  Upcall_Wrapper.cpp


LIBPATHS := . "../../../lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = ../../../bin/tao_idl
TAO_IDL_DEP = ../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

ifneq (,$(RC))
RESOURCES += \
  TAO_PortableServer.rc

RC_INCLUDE_FLAG ?= --include-dir=
RCFLAGS = \
        $(RC_INCLUDE_FLAG)../../.. \
        $(RC_INCLUDE_FLAG)../..
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/PortableServer
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    ifeq ($(LIBCHECK_PREFIX),)
      # If the user hasn't specified a place to look for installed libraries, let's set
      # a reasonable default
      LIBCHECK_PREFIX = /usr
    endif
    LIBCHECK ?= $(filter-out $(foreach lib,TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) ../../../lib $(if $(ARCH),../../../lib/$(ARCH)) $(LIBCHECK_PREFIX)/lib $(LIBCHECK_PREFIX)/lib64 $(LIBCHECK_EXTRA_PATHS) $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../lib $(if $(ARCH),-L../../../lib/$(ARCH))
endif
CPPFLAGS     += -I../../.. -I../..
CPPFLAGS     += -DTAO_HAS_VALUETYPE_OUT_INDIRECTION
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_PORTABLESERVER_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo PortableServer will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
export DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export SHLIB_PATH        := $(SHLIB_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export LIBPATH           := $(LIBPATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export PATH              := $(PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LD_RPATH ?= -Wl,-rpath,
LDFLAGS += $(LD_RPATH)$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /tao/PortableServer
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  )

LIB_INST_TAGS = header_files template_files inline_files$(if $(CUSTOM_INST_TAGS), $(CUSTOM_INST_TAGS))
LIB_INST_LOCATIONS = $(foreach tag,$(LIB_INST_TAGS),-b $(tag)=include$(INST_DIR))

INST_TAGS = lib_output$(if $(LIB_INST_TAGS), $(LIB_INST_TAGS))
INST_LOCATIONS = $(LIB_INST_LOCATIONS) -o lib_output=$(INSTALL_LIB)

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
	$(ACE_ROOT)/bin/ace_install_pkgconfig.pl TAO_PortableServer.pc.in --destdir "$(DESTDIR)" --prefix $(INSTALL_PREFIX) --libdir $(INSTALL_LIB) --libs "$(LIBS)" --version $(GNUACE_PROJECT_VERSION)
endif
endif
endif

#BEGIN MPC-Generated Install Info
#inline_files:
#POA_Current_Impl.inl
#POAManager.inl
#Non_Servant_Upcall.inl
#POA_Policy_Set.inl
#Var_Array_SArgument_T.inl
#Regular_POA.inl
#POA_Cached_Policies.inl
#Var_Size_SArgument_T.inl
#UB_String_SArgument_T.inl
#Active_Object_Map.inl
#Basic_SArgument_T.inl
#Creation_Time.inl
#BD_String_SArgument_T.inl
#Servant_Base.inl
#Root_POA.inl
#Servant_Upcall.inl
#Fixed_Array_SArgument_T.inl
#Object_SArgument_T.inl
#Vector_SArgument_T.inl
#Servant_var.inl
#Fixed_Size_SArgument_T.inl
#Special_Basic_SArgument_T.inl
#Active_Policy_Strategies.inl
#Object_Adapter.inl
#
#header_files:
#Acceptor_Filter_Factory.h
#Active_Object_Map.h
#Active_Object_Map_Entry.h
#Active_Policy_Strategies.h
#Any_SArg_Traits.h
#Basic_SArgument_T.h
#Basic_SArguments.h
#BD_String_SArgument_T.h
#Collocated_Arguments_Converter.h
#Collocated_Object_Proxy_Broker.h
#Creation_Time.h
#Default_Acceptor_Filter.h
#Default_Policy_Validator.h
#Default_Servant_Dispatcher.h
#Direct_Collocation_Upcall_Wrapper.h
#Fixed_Array_SArgument_T.h
#Fixed_Size_SArgument_T.h
#get_arg.h
#IdAssignmentPolicy.h
#IdAssignmentStrategy.h
#IdAssignmentStrategyFactory.h
#IdAssignmentStrategyFactoryImpl.h
#IdAssignmentStrategySystem.h
#IdAssignmentStrategyUser.h
#IdUniquenessPolicy.h
#IdUniquenessStrategy.h
#IdUniquenessStrategyFactory.h
#IdUniquenessStrategyFactoryImpl.h
#IdUniquenessStrategyMultiple.h
#IdUniquenessStrategyUnique.h
#IdUniquenessStrategyUniqueFactoryImpl.h
#ImplicitActivationPolicy.h
#ImplicitActivationStrategy.h
#ImplicitActivationStrategyExplicit.h
#ImplicitActivationStrategyFactory.h
#ImplicitActivationStrategyFactoryImpl.h
#ImplicitActivationStrategyImplicit.h
#ImR_Client_Adapter.h
#Key_Adapters.h
#LifespanPolicy.h
#LifespanStrategy.h
#LifespanStrategyFactory.h
#LifespanStrategyFactoryImpl.h
#LifespanStrategyPersistent.h
#LifespanStrategyPersistentFactoryImpl.h
#LifespanStrategyTransient.h
#LifespanStrategyTransientFactoryImpl.h
#Network_Priority_Hook.h
#Non_Servant_Upcall.h
#Object_Adapter.h
#Object_Adapter_Factory.h
#Object_SArg_Traits.h
#Object_SArgument_T.h
#Operation_Table.h
#Operation_Table_Binary_Search.h
#Operation_Table_Dynamic_Hash.h
#Operation_Table_Linear_Search.h
#Operation_Table_Perfect_Hash.h
#ORT_Adapter.h
#ORT_Adapter_Factory.h
#POA_Cached_Policies.h
#POA_Current.h
#POA_Current_Factory.h
#POA_Current_Impl.h
#POA_Guard.h
#poa_macros.h
#POA_Policy_Set.h
#POAManager.h
#POAManagerFactory.h
#Policy_Strategy.h
#PortableServer.h
#portableserver_export.h
#PortableServer_Functions.h
#PortableServer_WFunctions.h
#PS_ForwardA.h
#PS_ForwardC.h
#PS_ForwardS.h
#Regular_POA.h
#RequestProcessingPolicy.h
#RequestProcessingStrategy.h
#RequestProcessingStrategyAOMOnly.h
#RequestProcessingStrategyAOMOnlyFactoryImpl.h
#RequestProcessingStrategyDefaultServant.h
#RequestProcessingStrategyDefaultServantFI.h
#RequestProcessingStrategyFactory.h
#RequestProcessingStrategyFactoryImpl.h
#RequestProcessingStrategyServantActivator.h
#RequestProcessingStrategyServantActivatorFI.h
#RequestProcessingStrategyServantLocator.h
#RequestProcessingStrategyServantLocatorFI.h
#RequestProcessingStrategyServantManager.h
#Root_POA.h
#SArg_Traits_T.h
#Servant_Base.h
#Servant_Dispatcher.h
#Servant_Location.h
#Servant_Upcall.h
#Servant_var.h
#ServantRetentionPolicy.h
#ServantRetentionStrategy.h
#ServantRetentionStrategyFactory.h
#ServantRetentionStrategyFactoryImpl.h
#ServantRetentionStrategyNonRetain.h
#ServantRetentionStrategyNonRetainFactoryImpl.h
#ServantRetentionStrategyRetain.h
#ServantRetentionStrategyRetainFactoryImpl.h
#Special_Basic_SArgument_T.h
#Special_Basic_SArguments.h
#StrategyFactory.h
#SUpcall_commands.h
#ThreadPolicy.h
#ThreadStrategy.h
#ThreadStrategyFactory.h
#ThreadStrategyFactoryImpl.h
#ThreadStrategyORBControl.h
#ThreadStrategySingle.h
#ThreadStrategySingleFactoryImpl.h
#TypeCode_SArg_Traits.h
#UB_String_SArgument_T.h
#UB_String_SArguments.h
#Upcall_Command.h
#Upcall_Wrapper.h
#Var_Array_SArgument_T.h
#Var_Size_SArgument_T.h
#Vector_SArgument_T.h
#AdapterActivatorC.h
#ForwardRequestC.h
#IdAssignmentPolicyC.h
#IdUniquenessPolicyC.h
#ImplicitActivationPolicyC.h
#LifespanPolicyC.h
#POAC.h
#POAManagerC.h
#POAManagerFactoryC.h
#PolicyS.h
#PolicyS_T.h
#PortableServerC.h
#PortableServer_includeC.h
#PS_CurrentC.h
#RequestProcessingPolicyC.h
#ServantActivatorC.h
#ServantLocatorC.h
#ServantManagerC.h
#ServantRetentionPolicyC.h
#ThreadPolicyC.h
#AdapterActivatorA.h
#ForwardRequestA.h
#IdAssignmentPolicyA.h
#IdUniquenessPolicyA.h
#ImplicitActivationPolicyA.h
#LifespanPolicyA.h
#PortableServerA.h
#PortableServer_includeA.h
#RequestProcessingPolicyA.h
#ServantActivatorA.h
#ServantLocatorA.h
#ServantManagerA.h
#ServantRetentionPolicyA.h
#ThreadPolicyA.h
#ForwardRequestS.h
#AdapterActivatorS.h
#IdAssignmentPolicyS.h
#IdUniquenessPolicyS.h
#ImplicitActivationPolicyS.h
#LifespanPolicyS.h
#RequestProcessingPolicyS.h
#ServantActivatorS.h
#ServantLocatorS.h
#ServantManagerS.h
#ServantRetentionPolicyS.h
#ThreadPolicyS.h
#POAManagerS.h
#POAManagerFactoryS.h
#POAS.h
#PS_CurrentS.h
#PortableServer_includeS.h
#PortableServerS.h
#
#pidl_files:
#AdapterActivator.pidl
#ForwardRequest.pidl
#IdAssignmentPolicy.pidl
#IdUniquenessPolicy.pidl
#ImplicitActivationPolicy.pidl
#LifespanPolicy.pidl
#POA.pidl
#POAManager.pidl
#POAManagerFactory.pidl
#PS_Current.pidl
#PS_Forward.pidl
#PortableServer.pidl
#PortableServer_include.pidl
#RequestProcessingPolicy.pidl
#ServantActivator.pidl
#ServantLocator.pidl
#ServantManager.pidl
#ServantRetentionPolicy.pidl
#ThreadPolicy.pidl
#
#resource_files:
#TAO_PortableServer.rc
#
#template_files:
#Servant_var.cpp
#PolicyS_T.cpp
#Basic_SArgument_T.cpp
#BD_String_SArgument_T.cpp
#Fixed_Array_SArgument_T.cpp
#Fixed_Size_SArgument_T.cpp
#Object_SArgument_T.cpp
#Special_Basic_SArgument_T.cpp
#UB_String_SArgument_T.cpp
#Var_Array_SArgument_T.cpp
#Var_Size_SArgument_T.cpp
#Vector_SArgument_T.cpp
#
#source_files:
#Acceptor_Filter_Factory.cpp
#Active_Object_Map.cpp
#Active_Object_Map_Entry.cpp
#Active_Policy_Strategies.cpp
#Collocated_Arguments_Converter.cpp
#Collocated_Object_Proxy_Broker.cpp
#Creation_Time.cpp
#Default_Acceptor_Filter.cpp
#Default_Policy_Validator.cpp
#Default_Servant_Dispatcher.cpp
#Direct_Collocation_Upcall_Wrapper.cpp
#IdAssignmentPolicy.cpp
#IdAssignmentStrategy.cpp
#IdAssignmentStrategyFactoryImpl.cpp
#IdAssignmentStrategySystem.cpp
#IdAssignmentStrategyUser.cpp
#IdUniquenessPolicy.cpp
#IdUniquenessStrategyFactoryImpl.cpp
#IdUniquenessStrategyMultiple.cpp
#IdUniquenessStrategyUnique.cpp
#IdUniquenessStrategyUniqueFactoryImpl.cpp
#ImplicitActivationPolicy.cpp
#ImplicitActivationStrategy.cpp
#ImplicitActivationStrategyExplicit.cpp
#ImplicitActivationStrategyFactoryImpl.cpp
#ImplicitActivationStrategyImplicit.cpp
#ImR_Client_Adapter.cpp
#Key_Adapters.cpp
#LifespanPolicy.cpp
#LifespanStrategy.cpp
#LifespanStrategyFactoryImpl.cpp
#LifespanStrategyPersistent.cpp
#LifespanStrategyPersistentFactoryImpl.cpp
#LifespanStrategyTransient.cpp
#LifespanStrategyTransientFactoryImpl.cpp
#Network_Priority_Hook.cpp
#Non_Servant_Upcall.cpp
#Object_Adapter.cpp
#Object_Adapter_Factory.cpp
#Operation_Table.cpp
#Operation_Table_Binary_Search.cpp
#Operation_Table_Dynamic_Hash.cpp
#Operation_Table_Linear_Search.cpp
#Operation_Table_Perfect_Hash.cpp
#ORT_Adapter_Factory.cpp
#POA_Cached_Policies.cpp
#POA_Current.cpp
#POA_Current_Factory.cpp
#POA_Current_Impl.cpp
#POA_Guard.cpp
#POA_Policy_Set.cpp
#POAManager.cpp
#POAManagerFactory.cpp
#PortableServer.cpp
#PortableServer_Functions.cpp
#PortableServer_WFunctions.cpp
#PS_ForwardA.cpp
#PS_ForwardC.cpp
#Regular_POA.cpp
#RequestProcessingPolicy.cpp
#RequestProcessingStrategy.cpp
#RequestProcessingStrategyAOMOnly.cpp
#RequestProcessingStrategyAOMOnlyFactoryImpl.cpp
#RequestProcessingStrategyDefaultServant.cpp
#RequestProcessingStrategyDefaultServantFI.cpp
#RequestProcessingStrategyFactoryImpl.cpp
#RequestProcessingStrategyServantActivator.cpp
#RequestProcessingStrategyServantActivatorFI.cpp
#RequestProcessingStrategyServantLocator.cpp
#RequestProcessingStrategyServantLocatorFI.cpp
#RequestProcessingStrategyServantManager.cpp
#Root_POA.cpp
#Servant_Base.cpp
#Servant_Dispatcher.cpp
#Servant_Upcall.cpp
#ServantRetentionPolicy.cpp
#ServantRetentionStrategyFactoryImpl.cpp
#ServantRetentionStrategyNonRetain.cpp
#ServantRetentionStrategyNonRetainFactoryImpl.cpp
#ServantRetentionStrategyRetain.cpp
#ServantRetentionStrategyRetainFactoryImpl.cpp
#StrategyFactory.cpp
#SUpcall_commands.cpp
#ThreadPolicy.cpp
#ThreadStrategy.cpp
#ThreadStrategyFactoryImpl.cpp
#ThreadStrategyORBControl.cpp
#ThreadStrategySingle.cpp
#ThreadStrategySingleFactoryImpl.cpp
#Upcall_Command.cpp
#Upcall_Wrapper.cpp
#ForwardRequestC.cpp
#AdapterActivatorC.cpp
#IdAssignmentPolicyC.cpp
#IdUniquenessPolicyC.cpp
#ImplicitActivationPolicyC.cpp
#LifespanPolicyC.cpp
#RequestProcessingPolicyC.cpp
#ServantActivatorC.cpp
#ServantLocatorC.cpp
#ServantManagerC.cpp
#ServantRetentionPolicyC.cpp
#ThreadPolicyC.cpp
#POAManagerC.cpp
#POAManagerFactoryC.cpp
#POAC.cpp
#PolicyS.cpp
#PS_CurrentC.cpp
#PortableServer_includeC.cpp
#PortableServerC.cpp
#AdapterActivatorA.cpp
#ForwardRequestA.cpp
#IdAssignmentPolicyA.cpp
#IdUniquenessPolicyA.cpp
#ImplicitActivationPolicyA.cpp
#LifespanPolicyA.cpp
#RequestProcessingPolicyA.cpp
#ServantActivatorA.cpp
#ServantLocatorA.cpp
#ServantManagerA.cpp
#ServantRetentionPolicyA.cpp
#ThreadPolicyA.cpp
#
#pkgconfig_files:
#TAO_PortableServer.pc.in
#
#build_files:
#PortableServer.mpc
#
#lib_output:
#../../../lib TAO_PortableServer

#END MPC-Generated Install Info

