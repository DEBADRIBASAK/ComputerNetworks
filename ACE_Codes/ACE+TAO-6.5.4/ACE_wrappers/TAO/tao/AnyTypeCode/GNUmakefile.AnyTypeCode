# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.AnyTypeCode
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.AnyTypeCode
DEPENDENCY_FILE  = .depend.AnyTypeCode

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)TAO_AnyTypeCode.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)TAO_AnyTypeCode

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)TAO_AnyTypeCode.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  Alias_TypeCode_Static.cpp \
  Any.cpp \
  AnySeqA.cpp \
  AnySeqC.cpp \
  AnyTypeCode_Adapter_Impl.cpp \
  Any_Basic_Impl.cpp \
  Any_Impl.cpp \
  Any_SystemException.cpp \
  Any_Unknown_IDL_Type.cpp \
  BasicTypeTraits.cpp \
  BooleanSeqA.cpp \
  BoundsA.cpp \
  BoundsC.cpp \
  CONV_FRAMEA.cpp \
  CharSeqA.cpp \
  CurrentA.cpp \
  DoubleSeqA.cpp \
  DynamicA.cpp \
  DynamicC.cpp \
  Dynamic_ParameterA.cpp \
  Dynamic_ParameterC.cpp \
  Empty_Param_TypeCode.cpp \
  Enum_TypeCode_Static.cpp \
  ExceptionA.cpp \
  FloatSeqA.cpp \
  GIOPA.cpp \
  IIOPA.cpp \
  IIOP_EndpointsA.cpp \
  IOPA.cpp \
  Indirected_Type_TypeCode.cpp \
  LongDoubleSeqA.cpp \
  LongLongSeqA.cpp \
  LongSeqA.cpp \
  Marshal.cpp \
  Messaging_PolicyValueA.cpp \
  NVList.cpp \
  NVList_Adapter_Impl.cpp \
  ObjectIdListA.cpp \
  Objref_TypeCode_Static.cpp \
  OctetSeqA.cpp \
  PI_ForwardA.cpp \
  ParameterModeA.cpp \
  PolicyA.cpp \
  Policy_CurrentA.cpp \
  Policy_ForwardA.cpp \
  Policy_ManagerA.cpp \
  PortableInterceptorA.cpp \
  Sequence_TypeCode_Static.cpp \
  ServicesA.cpp \
  ShortSeqA.cpp \
  StringSeqA.cpp \
  String_TypeCode_Static.cpp \
  Struct_TypeCode_Static.cpp \
  SystemExceptionA.cpp \
  TAOA.cpp \
  TimeBaseA.cpp \
  True_RefCount_Policy.cpp \
  TypeCode.cpp \
  TypeCodeA.cpp \
  TypeCode_CDR_Extraction.cpp \
  TypeCode_Constants.cpp \
  ULongLongSeqA.cpp \
  ULongSeqA.cpp \
  UShortSeqA.cpp \
  Union_TypeCode_Static.cpp \
  ValueModifierA.cpp \
  ValueModifierC.cpp \
  Value_TypeCode_Static.cpp \
  VisibilityA.cpp \
  VisibilityC.cpp \
  WCharSeqA.cpp \
  WStringSeqA.cpp \
  WrongTransactionA.cpp \
  append.cpp \
  orb_typesA.cpp \
  skip.cpp


LIBPATHS := . "../../../lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lTAO -lACE
TAO_IDL = ../../../bin/tao_idl
TAO_IDL_DEP = ../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

ifneq (,$(RC))
RESOURCES += \
  TAO_AnyTypeCode.rc

RC_INCLUDE_FLAG ?= --include-dir=
RCFLAGS = \
        $(RC_INCLUDE_FLAG)../../.. \
        $(RC_INCLUDE_FLAG)../..
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/AnyTypeCode
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    ifeq ($(LIBCHECK_PREFIX),)
      # If the user hasn't specified a place to look for installed libraries, let's set
      # a reasonable default
      LIBCHECK_PREFIX = /usr
    endif
    LIBCHECK ?= $(filter-out $(foreach lib,TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) ../../../lib $(if $(ARCH),../../../lib/$(ARCH)) $(LIBCHECK_PREFIX)/lib $(LIBCHECK_PREFIX)/lib64 $(LIBCHECK_EXTRA_PATHS) $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../lib $(if $(ARCH),-L../../../lib/$(ARCH))
endif
CPPFLAGS     += -I../../.. -I../..
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_ANYTYPECODE_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo AnyTypeCode will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
export DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export SHLIB_PATH        := $(SHLIB_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export LIBPATH           := $(LIBPATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
export PATH              := $(PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LD_RPATH ?= -Wl,-rpath,
LDFLAGS += $(LD_RPATH)$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /tao/AnyTypeCode
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  )

LIB_INST_TAGS = header_files template_files inline_files$(if $(CUSTOM_INST_TAGS), $(CUSTOM_INST_TAGS))
LIB_INST_LOCATIONS = $(foreach tag,$(LIB_INST_TAGS),-b $(tag)=include$(INST_DIR))

INST_TAGS = lib_output$(if $(LIB_INST_TAGS), $(LIB_INST_TAGS))
INST_LOCATIONS = $(LIB_INST_LOCATIONS) -o lib_output=$(INSTALL_LIB)

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
	$(ACE_ROOT)/bin/ace_install_pkgconfig.pl TAO_AnyTypeCode.pc.in --destdir "$(DESTDIR)" --prefix $(INSTALL_PREFIX) --libdir $(INSTALL_LIB) --libs "$(LIBS)" --version $(GNUACE_PROJECT_VERSION)
endif
endif
endif

#BEGIN MPC-Generated Install Info
#header_files:
#Alias_TypeCode.h
#Alias_TypeCode_Static.h
#Any.h
#Any_Arg_Traits.h
#Any_Array_Impl_T.h
#Any_Basic_Impl.h
#Any_Basic_Impl_T.h
#Any_Dual_Impl_T.h
#Any_Impl.h
#Any_Impl_T.h
#Any_Special_Impl_T.h
#Any_SystemException.h
#Any_Unknown_IDL_Type.h
#AnyTypeCode_Adapter_Impl.h
#AnyTypeCode_methods.h
#BasicTypeTraits.h
#BasicTypeTraits_T.h
#Empty_Param_TypeCode.h
#Enum_TypeCode.h
#Enum_TypeCode_Static.h
#ExceptionA.h
#Fixed_TypeCode.h
#Indirected_Type_TypeCode.h
#Marshal.h
#Null_RefCount_Policy.h
#NVList.h
#NVList_Adapter_Impl.h
#Objref_TypeCode.h
#Objref_TypeCode_Static.h
#Recursive_Type_TypeCode.h
#RefCount_Policy_Traits.h
#Sequence_TypeCode.h
#Sequence_TypeCode_Static.h
#String_TypeCode.h
#String_TypeCode_Static.h
#String_TypeCode_Traits.h
#Struct_TypeCode.h
#Struct_TypeCode_Static.h
#SystemExceptionA.h
#TAO_AnyTypeCode_Export.h
#TC_Constants_Forward.h
#True_RefCount_Policy.h
#TypeCode.h
#TypeCode_Base_Attributes.h
#TypeCode_Case_Base_T.h
#TypeCode_Case_Enum_T.h
#TypeCode_Case_T.h
#TypeCode_CDR_Extraction.h
#TypeCode_Constants.h
#TypeCode_Struct_Field.h
#TypeCode_Traits.h
#Typecode_typesA.h
#TypeCode_Value_Field.h
#Union_TypeCode.h
#Union_TypeCode_Static.h
#Value_TypeCode.h
#Value_TypeCode_Static.h
#Vector_AnyOp_T.h
#WrongTransactionA.h
#GIOPA.h
#BooleanSeqA.h
#CONV_FRAMEA.h
#CharSeqA.h
#CurrentA.h
#DoubleSeqA.h
#FloatSeqA.h
#IIOPA.h
#IOPA.h
#IIOP_EndpointsA.h
#LongDoubleSeqA.h
#LongLongSeqA.h
#LongSeqA.h
#Messaging_PolicyValueA.h
#Messaging_SyncScopeA.h
#ObjectIdListA.h
#OctetSeqA.h
#PI_ForwardA.h
#ParameterModeA.h
#PolicyA.h
#Policy_CurrentA.h
#Policy_ForwardA.h
#Policy_ManagerA.h
#PortableInterceptorA.h
#ServicesA.h
#ShortSeqA.h
#StringSeqA.h
#TAOA.h
#TimeBaseA.h
#ULongLongSeqA.h
#ULongSeqA.h
#UShortSeqA.h
#WCharSeqA.h
#WStringSeqA.h
#orb_typesA.h
#AnySeqA.h
#AnySeqC.h
#AnySeqS.h
#BoundsA.h
#BoundsC.h
#BoundsS.h
#DynamicA.h
#DynamicC.h
#Dynamic_ParameterA.h
#Dynamic_ParameterC.h
#Dynamic_ParameterS.h
#DynamicS.h
#ValueModifierA.h
#ValueModifierC.h
#ValueModifierS.h
#VisibilityA.h
#VisibilityC.h
#VisibilityS.h
#
#inline_files:
#Alias_TypeCode.inl
#Alias_TypeCode_Static.inl
#Any.inl
#Any_Array_Impl_T.inl
#Any_Basic_Impl_T.inl
#Any_Dual_Impl_T.inl
#Any_Impl_T.inl
#Any_Special_Impl_T.inl
#Empty_Param_TypeCode.inl
#Enum_TypeCode.inl
#Enum_TypeCode_Static.inl
#Fixed_TypeCode.inl
#Indirected_Type_TypeCode.inl
#Marshal.inl
#NVList.inl
#Objref_TypeCode.inl
#Objref_TypeCode_Static.inl
#Recursive_Type_TypeCode.inl
#Sequence_TypeCode.inl
#Sequence_TypeCode_Static.inl
#String_TypeCode.inl
#String_TypeCode_Static.inl
#Struct_TypeCode.inl
#Struct_TypeCode_Static.inl
#True_RefCount_Policy.inl
#TypeCode.inl
#TypeCode_Base_Attributes.inl
#TypeCode_Case_Base_T.inl
#TypeCode_Case_Enum_T.inl
#TypeCode_Case_T.inl
#Union_TypeCode.inl
#Union_TypeCode_Static.inl
#Value_TypeCode.inl
#Value_TypeCode_Static.inl
#
#build_files:
#AnyTypeCode.mpc
#extra_anytypecode.mpb
#
#pkgconfig_files:
#TAO_AnyTypeCode.pc.in
#
#source_files:
#ServicesA.cpp
#Alias_TypeCode_Static.cpp
#Any.cpp
#AnySeqA.cpp
#AnySeqC.cpp
#Any_Basic_Impl.cpp
#Any_Impl.cpp
#Any_SystemException.cpp
#Any_Unknown_IDL_Type.cpp
#AnyTypeCode_Adapter_Impl.cpp
#append.cpp
#BasicTypeTraits.cpp
#BooleanSeqA.cpp
#BoundsA.cpp
#BoundsC.cpp
#CharSeqA.cpp
#CONV_FRAMEA.cpp
#CurrentA.cpp
#DoubleSeqA.cpp
#DynamicA.cpp
#DynamicC.cpp
#Dynamic_ParameterA.cpp
#Dynamic_ParameterC.cpp
#Empty_Param_TypeCode.cpp
#Enum_TypeCode_Static.cpp
#ExceptionA.cpp
#FloatSeqA.cpp
#GIOPA.cpp
#IIOPA.cpp
#IOPA.cpp
#IIOP_EndpointsA.cpp
#Indirected_Type_TypeCode.cpp
#LongDoubleSeqA.cpp
#LongLongSeqA.cpp
#LongSeqA.cpp
#Marshal.cpp
#Messaging_PolicyValueA.cpp
#NVList.cpp
#NVList_Adapter_Impl.cpp
#ObjectIdListA.cpp
#Objref_TypeCode_Static.cpp
#OctetSeqA.cpp
#orb_typesA.cpp
#ParameterModeA.cpp
#PI_ForwardA.cpp
#PolicyA.cpp
#Policy_CurrentA.cpp
#Policy_ForwardA.cpp
#Policy_ManagerA.cpp
#PortableInterceptorA.cpp
#Sequence_TypeCode_Static.cpp
#ShortSeqA.cpp
#skip.cpp
#StringSeqA.cpp
#String_TypeCode_Static.cpp
#Struct_TypeCode_Static.cpp
#SystemExceptionA.cpp
#TAOA.cpp
#TimeBaseA.cpp
#True_RefCount_Policy.cpp
#TypeCode.cpp
#TypeCodeA.cpp
#TypeCode_CDR_Extraction.cpp
#TypeCode_Constants.cpp
#ULongLongSeqA.cpp
#ULongSeqA.cpp
#Union_TypeCode_Static.cpp
#UShortSeqA.cpp
#Value_TypeCode_Static.cpp
#ValueModifierC.cpp
#ValueModifierA.cpp
#VisibilityA.cpp
#VisibilityC.cpp
#WCharSeqA.cpp
#WrongTransactionA.cpp
#WStringSeqA.cpp
#
#template_files:
#Any_Array_Impl_T.cpp
#Any_Basic_Impl_T.cpp
#Any_Dual_Impl_T.cpp
#Any_Impl_T.cpp
#Any_Special_Impl_T.cpp
#TypeCode_Case_Base_T.cpp
#TypeCode_Case_Enum_T.cpp
#TypeCode_Case_T.cpp
#Alias_TypeCode.cpp
#Enum_TypeCode.cpp
#Fixed_TypeCode.cpp
#Objref_TypeCode.cpp
#Recursive_Type_TypeCode.cpp
#Sequence_TypeCode.cpp
#String_TypeCode.cpp
#Struct_TypeCode.cpp
#TypeCode_Base_Attributes.cpp
#Union_TypeCode.cpp
#Value_TypeCode.cpp
#
#resource_files:
#TAO_AnyTypeCode.rc
#
#pidl_files:
#AnySeq.pidl
#Bounds.pidl
#Dynamic.pidl
#Dynamic_Parameter.pidl
#ValueModifier.pidl
#Visibility.pidl
#
#lib_output:
#../../../lib TAO_AnyTypeCode

#END MPC-Generated Install Info

